import os
import hashlib
import json
import shutil
from settings import *

envs = dict()
buildmap = dict()
contents = dict()

def do_clean():
	for subdir, dirs, files in os.walk(objroot):
		for dir in dirs:
			shutil.rmtree(os.path.join(subdir, dir))
	if os.path.exists(objroot + 'buildmap.json'):
		os.remove(objroot + 'buildmap.json')
	for subdir, dirs, files in os.walk(binroot):
		for dir in dirs:
			shutil.rmtree(os.path.join(subdir, dir))

def do_build():
	for key, value in builds.items():
		print("> Preparing build: " + key)
		cflags    = cflags_common    + ' ' + builds[key].get('cflags', '')
		linkflags = linkflags_common + ' ' + builds[key].get('linkflags', '')
		library   = builds[key].get('library', False)
		envs[key] = Environment(CCFLAGS = cflags, LINKFLAGS = linkflags)

		# If multiple builds use the same compile flags, we compile the sources once
		cflags_hash = hashlib.md5(cflags.encode('utf-8')).hexdigest()
		buildmap[key] = cflags_hash
		objdir = objroot + cflags_hash + '/'
		objects = list()
		for source in sources:
			source_relpath = os.path.relpath(str(source), srcdir)
			object = objdir + str(source_relpath).replace('.cpp', '.o')
			envs[key].Object(target = object, source = source)
			objects.append(object)

		bindir = binroot + key + '/'
		if library:
			envs[key].Library(bindir + binary, objects)
		else:
			envs[key].Program(bindir + binary, objects)
		contents[cflags_hash] = list(objects)
		print("> ---")

	with open(objroot + 'buildmap.json', 'w') as fp:
		json.dump(buildmap, fp, indent = 2)
		fp.write("\n")

	with open(objroot + 'contents.json', 'w') as fp:
		json.dump(contents, fp, indent = 2)
		fp.write("\n")

env = DefaultEnvironment()
if env.GetOption('clean'):
	do_clean()
	print("Sources: clean specification done")
else:
	do_build()
	print("Sources: build specification done")

print("===")
