@startuml dane
class BiMap<T,U> {
	- {field}	mapping : std::unordered_map<T,U>
	- {field}	reverseMapping : std::unordered_map<U,T>
	+ {method}	atT(const T &) const : const U &
	+ {method}	atU(const U &) const : const T &
	+ {method}	insert(T, U) : bool
}

class EncoderDecoder {
	- {field}	hasEncoding : bool
	+ {method}	encode(const std::string &plaintext) const = 0 : std::string
	+ {method}	decode(const std::string &encodedPlaintext) const = 0 : std::string
	+ {method}	constexpr makeCanonicalEncoding() = 0 : void
	+ {method}	makeEncodingFromText(const std::string &plaintext) = 0 : void
	+ {method}	makeEncodingFromDaneEncodingSection(const std::string &header) = 0 : void
	+ {method}	exportEncoding() const = 0 : const std::string
}

class HuffmanEncoderDecoder {
	- {field}	mapping : BiMap<char, std::pair<unsigned char, unsigned int>>
	- {method}	{static} getFrequencies(const std::string &plaintext) : std::list<HuffmanNode>
	- {method}	{static} buildPrefixlessTree(std::list<HuffmanNode> &frequencies) : HuffmanNode &
	- {method}	createMapping(const HuffmanNode &root) : void
	+ {method}	encode(const std::string &plaintext) const : std::string
	+ {method}	decode(const std::string &encodedPlaintext) const : std::string
	+ {method}	constexpr makeCanonicalEncoding() : void
	+ {method}	makeEncodingFromText(const std::string &plaintext) : void
	+ {method}	makeEncodingFromDaneEncodingSection(const std::string &header) : void
	+ {method}	exportEncoding() const : const std::string
}

class HuffmanNode {
	+ {field}	character : const char
	+ {field}	frequency : const int
	+ {field}	leftSon : HuffmanNode *
	+ {field}	rightSon : HuffmanNode *
	+ {method}	HuffmanNode(const char character, const int frequency)
}

EncoderDecoder <|-- HuffmanEncoderDecoder
HuffmanEncoderDecoder *-- BiMap
HuffmanEncoderDecoder +-- "Private Nested" HuffmanNode
@enduml